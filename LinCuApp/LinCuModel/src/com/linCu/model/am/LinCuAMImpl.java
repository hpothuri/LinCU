package com.linCu.model.am;

import com.linCu.model.am.common.LinCuAM;
import com.linCu.model.constants.LookupValuesForExcel;
import com.linCu.model.view.CreditUnionBranchVOImpl;
import com.linCu.model.view.CreditUnionBranchVORowImpl;
import com.linCu.model.view.CreditUnionVOImpl;
import com.linCu.model.view.CreditUnionVORowImpl;
import com.linCu.model.view.LincuMemberCardAuditVOImpl;
import com.linCu.model.view.LincuMemberCardAuditVORowImpl;
import com.linCu.model.view.LincuMemberCardDocsVOImpl;
import com.linCu.model.view.LincuMemberCardDocsVORowImpl;
import com.linCu.model.view.LincuMemberCardVOImpl;
import com.linCu.model.view.LincuMemberCardVORowImpl;
import com.linCu.model.view.LincuMemberVOImpl;
import com.linCu.model.view.LincuMemberVORowImpl;
import com.linCu.model.view.LincuUserInfoVOImpl;
import com.linCu.model.view.LincuUserInfoVORowImpl;
import com.linCu.model.vvo.CardApplicationVVOImpl;
import com.linCu.model.vvo.CardApplicationVVORowImpl;
import com.linCu.model.vvo.CountryVVORowImpl;
import com.linCu.model.vvo.LincuUnionsVVOImpl;
import com.linCu.model.vvo.LincuUnionsVVORowImpl;
import com.linCu.model.vvo.LoginVVOImpl;
import com.linCu.model.vvo.LoginVVORowImpl;


import com.linCu.model.vvo.LookUpDataVVORowImpl;

import com.linCu.model.vvo.OccupationCodesVVORowImpl;

import java.math.BigDecimal;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.poi.hssf.usermodel.HSSFBorderFormatting;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Mar 11 00:25:16 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LinCuAMImpl extends ApplicationModuleImpl implements LinCuAM {
    /**
     * This is the default constructor (do not remove).
     */
    public LinCuAMImpl() {
    }

    /**
     * Container's getter for CreditUnion.
     * @return CreditUnion
     */
    public CreditUnionVOImpl getCreditUnion() {
        return (CreditUnionVOImpl) findViewObject("CreditUnion");
    }

    /**
     * Container's getter for LincuUserInfo.
     * @return LincuUserInfo
     */
    public LincuUserInfoVOImpl getLincuUserInfo() {
        return (LincuUserInfoVOImpl) findViewObject("LincuUserInfo");
    }

    /**
     * Container's getter for CreditUnionBranch.
     * @return CreditUnionBranch
     */
    public CreditUnionBranchVOImpl getCreditUnionBranch() {
        return (CreditUnionBranchVOImpl) findViewObject("CreditUnionBranch");
    }

    /**
     * Container's getter for LoginView.
     * @return LoginView
     */
    public LoginVVOImpl getLoginView() {
        return (LoginVVOImpl) findViewObject("LoginView");
    }

    /**
     * Container's getter for CreditUnionBranchVL.
     * @return CreditUnionBranchVL
     */
    public ViewLinkImpl getCreditUnionBranchVL() {
        return (ViewLinkImpl) findViewLink("CreditUnionBranchVL");
    }
    
    public String validateLogin(String userName, String password){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            String psd = row.getPassword();
            if((password != null) && (password.equals(psd))){
                if("Y".equalsIgnoreCase(row.getFirstLoginFlag())){
                 return "FirstLoginSuccess";
                }else{
                return "Success";
                }
            }else{
                return "InvalidLogin";
            }
        }else{
            return "InvalidUserName";
        }
    }
    
    public Map userSessionInfo(String userName){
        Map userMap = new HashMap<String, String>();
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            userMap.put("userName", row.getUserName());
            userMap.put("role", row.getRole());
            userMap.put("roleDesc", row.getRoleDescription()); 
            userMap.put("userType", row.getRoleDescription());
            userMap.put("creditUnionId", row.getCreditUnionId());
        }
        return userMap;
    }
    /**
     * Container's getter for LincuUserInfoVO2.
     * @return LincuUserInfoVO2
     */
    public LincuUserInfoVOImpl getPasswordReset() {
        return (LincuUserInfoVOImpl) findViewObject("PasswordReset");
    }


    public Long userCurrentRow(String userName){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            Long userId = row.getUserId();
            if(userId != null){
                return userId;
            }
        }else{
            return null;
        }
        return null;
    }
    
    public void setUserCurrentRow(Long userId){
        LincuUserInfoVOImpl loginView = this.getPasswordReset();
        Row[] rows = loginView.findByKey(new Key(new Object[]{userId}), 1);
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)rows[0];
        this.getPasswordReset().setCurrentRow(row);
        
    }
    
    public String firstTimeResetPassword(String newPassword, String confirmPassword, Long userId){
        if((newPassword != null) && (confirmPassword != null) && newPassword.equalsIgnoreCase(confirmPassword)){  
            LincuUserInfoVOImpl loginView = this.getPasswordReset();
            LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
            loginView.setCurrentRow(row);  
           if(row != null){
               String qustn1 = row.getSecurityQustn();
               String qustn2 = row.getSecurityQustn1();
               String qustn3 = row.getSecurityQustn2();
               String qustn4 = row.getSecurityQustn3();
               String qustn5 = row.getSecurityQustn4();
               
               Set<String> setToFindDuplicate = new HashSet<String>();
               if(qustn1 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn1); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn2 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn2); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn3 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn3); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn4 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn4); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn5 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn5); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
                  row.setPassword(newPassword);
                  row.setFirstLoginFlag("N");
                  this.getDBTransaction().commit();
                  return "success";             
           }
            
        }else{
            return "MismatchInConfirmPassword";
        }
        
        return "failure";
    }
    
    public String validateSecQustns(String answer1, String answer2, String answer3, String answer4, String answer5){
        LincuUserInfoVOImpl loginView = this.getPasswordReset();
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
        loginView.setCurrentRow(row); 
        if(row != null){
            if((answer1 != null) && (!answer1.equalsIgnoreCase(row.getSecurityQustnAns()))){
              return "failure";  
            }
            if((answer2 != null) && (!answer2.equalsIgnoreCase(row.getSecurityQustnAns1()))){
              return "failure";  
            }
            if((answer3 != null) && (!answer3.equalsIgnoreCase(row.getSecurityQustnAns2()))){
              return "failure";  
            }
            if((answer4 != null) && (!answer4.equalsIgnoreCase(row.getSecurityQustnAns3()))){
              return "failure";  
            }
            if((answer5 != null) && (!answer5.equalsIgnoreCase(row.getSecurityQustnAns4()))){
              return "failure";  
            }
        }
       return "success"; 
    }
    
    public String resetPassword(String oldPassword, String newPassword, String confirmPassword){
        if((newPassword != null) && (confirmPassword != null) && newPassword.equalsIgnoreCase(confirmPassword)){
            LincuUserInfoVOImpl loginView = this.getPasswordReset();
            LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
            loginView.setCurrentRow(row); 
           if(row != null){
              String password =  row.getPassword();
              if((oldPassword != null) && (password != null) && oldPassword.equalsIgnoreCase(password)){
                  row.setPassword(newPassword);
                  row.setFirstLoginFlag("N");
                  this.getDBTransaction().commit();
                  return "success";
              }else{
                  return "InvalidOldPassword";
              }
           }
            
        }else{
            return "MismatchInConfirmPassword";
        }
        
        //this.getCurrentRow();
        
        return "failure";
    }
    
    public void forgotResetPassword(String password){
        LincuUserInfoVOImpl loginView = this.getPasswordReset();
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
        loginView.setCurrentRow(row); 
        if(row != null){
        row.setPassword(password);
        row.setFirstLoginFlag("Y");
        }
    }
    
    public void setLoggedInUserCurrentRow(String userName){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            Long userId = row.getUserId();
            if(userId != null){
                Row[] rows = loginView.findByKey(new Key(new Object[]{userId}), 1);
                LincuUserInfoVORowImpl row1 = (LincuUserInfoVORowImpl)rows[0];
                loginView.setCurrentRow(row1);
            }
        }
    }

    /**
     * Container's getter for LincuMemberVO1.
     * @return LincuMemberVO1
     */
    public LincuMemberVOImpl getLincuMember() {
        return (LincuMemberVOImpl) findViewObject("LincuMember");
    }

    /**
     * Container's getter for LincuMemberCardVO1.
     * @return LincuMemberCardVO1
     */
    public LincuMemberCardVOImpl getLincuMemberCard() {
        return (LincuMemberCardVOImpl) findViewObject("LincuMemberCard");
    }

    /**
     * Container's getter for LincuMemberCardDocsVO1.
     * @return LincuMemberCardDocsVO1
     */
    public LincuMemberCardDocsVOImpl getLincuMemberCardDocs() {
        return (LincuMemberCardDocsVOImpl) findViewObject("LincuMemberCardDocs");
    }

    /**
     * Container's getter for MemberCardToMemberDocsVL1.
     * @return MemberCardToMemberDocsVL1
     */
    public ViewLinkImpl getMemberCardToMemberDocsVL1() {
        return (ViewLinkImpl) findViewLink("MemberCardToMemberDocsVL1");
    }
    
    public String userExists(String userName){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            return "success";
        }else{
            return "InvalidUserName";
        }
    }
    
    public void requestCard(String requestor, String creditUnionId){
        LincuMemberCardVOImpl cardVO = this.getLincuMemberCard();
        LincuMemberCardVORowImpl row = (LincuMemberCardVORowImpl) cardVO.createRow();
        if(row != null){
        cardVO.insertRow(row);
        cardVO.setCurrentRow(row);
        row.setCreditUnionId(creditUnionId);
        row.setCreatedBy(requestor);
        long time = System.currentTimeMillis();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(time);
        row.setCreatedOn(timestamp);
        //Create audit record
            LincuMemberCardAuditVOImpl audit = this.getLincuMemberCardAudit();
            LincuMemberCardAuditVORowImpl auditRow = (LincuMemberCardAuditVORowImpl)audit.createRow();
            if(auditRow != null){
                audit.insertRow(auditRow);
                audit.setCurrentRow(auditRow);
                auditRow.setCardId(row.getCardId());
                auditRow.setStatus("DRAFT");
                auditRow.setUpdatedBy(requestor);
                auditRow.setUpdatedDate(timestamp);
                auditRow.setCreditUnionId(creditUnionId);
            }
            //Create required docs for card
        LincuMemberCardDocsVOImpl docVO = this.getLincuMemberCardDocs();
        LincuMemberCardDocsVORowImpl docRow1 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
        if(docRow1 != null){
            docVO.insertRow(docRow1);
            docRow1.setRequired("Y"); 
            docRow1.setDocumentType("ID_PROOF");
        }
            LincuMemberCardDocsVORowImpl docRow2 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
            if(docRow2 != null){
                docVO.insertRow(docRow2);
                docRow2.setRequired("Y"); 
                docRow2.setDocumentType("ADDRESS_PROOF");
            }
        }
    }
    
    public void deleteDocumentRecords(){
        LincuMemberCardDocsVOImpl audit = this.getLincuMemberCardDocs();
        Row[] rows = audit.getAllRowsInRange();
        for(Row row : rows){
            row.remove();
        }
    }
    
    public void saveCardRequest(){
        LincuMemberCardVOImpl cardVO = this.getLincuMemberCard();
        LincuMemberCardVORowImpl row = (LincuMemberCardVORowImpl) cardVO.getCurrentRow();
        if(row != null){
        cardVO.setCurrentRow(row);
        //Create audit record
            LincuMemberCardAuditVOImpl audit = this.getLincuMemberCardAudit();
            LincuMemberCardAuditVORowImpl auditRow = (LincuMemberCardAuditVORowImpl)audit.getCurrentRow();
            if(auditRow != null && "DRAFT".equalsIgnoreCase(row.getCardStatus())){
                audit.setCurrentRow(auditRow);
                auditRow.setCardReqType(row.getCardReqType());
                auditRow.setMemberId(row.getMemberId());
            } 
        }
    }
    
    public void updateAuditTable(){
        LincuMemberCardVOImpl cardVO = this.getLincuMemberCard();
        LincuMemberCardVORowImpl row = (LincuMemberCardVORowImpl) cardVO.getCurrentRow();
        if(row != null){
        cardVO.setCurrentRow(row);
        //Create audit record
            LincuMemberCardAuditVOImpl audit = this.getLincuMemberCardAudit();
            LincuMemberCardAuditVORowImpl auditRow = (LincuMemberCardAuditVORowImpl)audit.createRow();
            if(auditRow != null){
                audit.insertRow(auditRow);
                audit.setCurrentRow(auditRow);
                auditRow.setCardId(row.getCardId());
                auditRow.setCardReqType(row.getCardReqType());
                if("SUBMITTED".equalsIgnoreCase(row.getCardStatus())){
                auditRow.setComments(row.getComments());
                }else if("REJECTED".equalsIgnoreCase(row.getCardStatus()) || "AUTHORIZED".equalsIgnoreCase(row.getCardStatus())){
                auditRow.setComments(row.getSupComments());    
                }else if("LINCU_REJECTED".equalsIgnoreCase(row.getCardStatus()) || "LINCU_AUTHORIZED".equalsIgnoreCase(row.getCardStatus())){
                auditRow.setComments(row.getLincuComments());       
                }else if("FCB_REJECTED".equalsIgnoreCase(row.getCardStatus()) || "FCB_AUTHORIZED".equalsIgnoreCase(row.getCardStatus())){
                auditRow.setComments(row.getFcbComments());       
                }
                auditRow.setCreditUnionId(row.getCreditUnionId());
                auditRow.setMemberId(row.getMemberId());
                auditRow.setStatus(row.getCardStatus());
                auditRow.setUpdatedBy(row.getLastUpdatedBy());             
                auditRow.setUpdatedDate(row.getLastUpdateDate());
            } 
        }
    }
    public boolean isAllRequiredDocumentsUploaded(){
        LincuMemberCardDocsVOImpl vo = this.getLincuMemberCardDocs();
           Row rows[] = vo.getAllRowsInRange();
           for(Row row : rows){
              LincuMemberCardDocsVORowImpl docRow = (LincuMemberCardDocsVORowImpl)row;
               if(docRow != null){
                   if("Y".contentEquals(docRow.getRequired()) && docRow.getDocument() == null){
                       return false;
                   }
               }
             }
        return true;
    }
    
    public void addRequiredDcosRecords(){
        LincuMemberCardVOImpl cardVO = this.getLincuMemberCard();
        LincuMemberCardVORowImpl row = (LincuMemberCardVORowImpl) cardVO.getCurrentRow();
        if(row != null){
        cardVO.setCurrentRow(row);
        LincuMemberCardDocsVOImpl docVO = this.getLincuMemberCardDocs();
        LincuMemberCardDocsVORowImpl docRow1 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
        if(docRow1 != null){
            docVO.insertRow(docRow1);
            docRow1.setRequired("Y"); 
            docRow1.setDocumentType("ID_PROOF");
        }
            LincuMemberCardDocsVORowImpl docRow2 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
            if(docRow2 != null){
                docVO.insertRow(docRow2);
                docRow2.setRequired("Y"); 
                docRow2.setDocumentType("ADDRESS_PROOF");
            }
        }
    }

    public void addToBatch() {
        Row[] selectedRows = getLincuMemberCard().getFilteredRows("RowSelection", Boolean.TRUE);
        SequenceImpl nextBatchNum = new SequenceImpl("BATCH_NUMBER_SEQ", getDBTransaction());
        for (Row row : selectedRows) {
            ((LincuMemberCardVORowImpl) row).setBatchNumber(nextBatchNum.getSequenceNumber().getBigDecimalValue());
            ((LincuMemberCardVORowImpl) row).setRowSelection(Boolean.FALSE);
        }
        getLincuMemberCard().clearCache();
        getLincuMemberCard().executeQuery();
    }

    /**
     * Container's getter for LincuMemberCardAuditVO1.
     * @return LincuMemberCardAuditVO1
     */
    public LincuMemberCardAuditVOImpl getLincuMemberCardAudit() {
        return (LincuMemberCardAuditVOImpl) findViewObject("LincuMemberCardAudit");
    }

    /**
     * Container's getter for MemberCardToMemberCardAuditVL1.
     * @return MemberCardToMemberCardAuditVL1
     */
    public ViewLinkImpl getMemberCardToMemberCardAuditVL1() {
        return (ViewLinkImpl) findViewLink("MemberCardToMemberCardAuditVL1");
    }
    
    public List createExportCardDetailsWb() {
    HSSFWorkbook wb = new HSSFWorkbook();
    HSSFSheet sheet = wb.createSheet("CardDetails"); //Sheet Name
    int idx = 0; // rows index
    //Creating styles code starts
    HSSFFont colHdrFont = wb.createFont();
    colHdrFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
    HSSFFont fontSizeHrd = wb.createFont();
    fontSizeHrd.setFontHeightInPoints((short) 16); //setting Headding font size
    fontSizeHrd.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
    HSSFCellStyle colStyleHrdWithFont = wb.createCellStyle();
    colStyleHrdWithFont.setFont(fontSizeHrd);

    HSSFCellStyle colStyleTopLeft = wb.createCellStyle();
    colStyleTopLeft.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeft.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeft.setFont(colHdrFont);
    HSSFCellStyle colStyleTopLeftWithCenter = wb.createCellStyle();
    colStyleTopLeftWithCenter.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeftWithCenter.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeftWithCenter.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeftWithCenter.setAlignment(CellStyle.ALIGN_CENTER);
    colStyleTopLeftWithCenter.setFont(colHdrFont);
    HSSFCellStyle colStyleLeft = wb.createCellStyle();
    colStyleLeft.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeft.setFont(colHdrFont);
    HSSFCellStyle colStyleLeftDealNo = wb.createCellStyle();
    colStyleLeftDealNo.setAlignment(CellStyle.ALIGN_LEFT);
    HSSFCellStyle colStyleLeftDept = wb.createCellStyle();
    colStyleLeftDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftDept.setFont(colHdrFont);
    HSSFCellStyle colStyleOnlyRight = wb.createCellStyle();
    colStyleOnlyRight.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleOnlyRightDept = wb.createCellStyle();
    colStyleOnlyRightDept.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleOnlyRightDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleOnlyRightDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleLeftBottom = wb.createCellStyle();
    colStyleLeftBottom.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftBottom.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftBottom.setFont(colHdrFont);
    HSSFCellStyle colStyleLeftBottomWithOutHrd = wb.createCellStyle();
    colStyleLeftBottomWithOutHrd.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftBottomWithOutHrd.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleRightBottomWithOutHrd = wb.createCellStyle();
    colStyleRightBottomWithOutHrd.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleRightBottomWithOutHrd.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleRightBottomWithOutHrdDept = wb.createCellStyle();
    colStyleRightBottomWithOutHrdDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleRightBottomWithOutHrdDept.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleRightBottomWithOutHrdDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleTop = wb.createCellStyle();
    colStyleTop.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTop.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleTop.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTop.setAlignment(CellStyle.ALIGN_CENTER);
    colStyleTop.setFont(colHdrFont);
    HSSFCellStyle colStyleTopRight = wb.createCellStyle();
    colStyleTopRight.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopRight.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopRight.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopRight.setAlignment(CellStyle.ALIGN_CENTER);
    colStyleTopRight.setFont(colHdrFont);
    HSSFCellStyle colStyleTopWithOutHrd = wb.createCellStyle();
    colStyleTopWithOutHrd.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleBottom = wb.createCellStyle();
    colStyleBottom.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleBottomWithHrd = wb.createCellStyle();
    colStyleBottomWithHrd.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleBottomWithHrd.setFont(colHdrFont);
    HSSFCellStyle colStyleRight = wb.createCellStyle();
    colStyleRight.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleRight.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleRight.setFont(colHdrFont);
    HSSFCellStyle colStyleHrd = wb.createCellStyle();
    colStyleHrd.setFont(colHdrFont);
    HSSFCellStyle colStyleHrdDept = wb.createCellStyle();
    colStyleHrdDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleHrdDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleHrdDept.setFont(colHdrFont);
    //Creating styles code ends
    HSSFRow row = null;
    LincuMemberCardVOImpl cardDetails = this.getLincuMemberCard();
    RowSetIterator rowIter = cardDetails.createRowSetIterator(null); //creating secoundary Iterator
    rowIter.reset();
    Boolean flag = false;
    LincuMemberCardVORowImpl dataRow;
    while (rowIter.hasNext()) { 
    row = sheet.createRow(idx); //creating 1st row
    dataRow = (LincuMemberCardVORowImpl) rowIter.next();
    if(flag == false){

    row.createCell(0).setCellValue("ZMDPID"); //setting column heading
    sheet.autoSizeColumn(0);
    row.getCell(0).setCellStyle(colStyleTopLeft);
    row.createCell(1).setCellValue("PREF");
    sheet.autoSizeColumn(1);
    row.getCell(1).setCellStyle(colStyleTopLeft);
    row.createCell(2).setCellValue("FNAME");
    sheet.autoSizeColumn(2);
    row.getCell(2).setCellStyle(colStyleTopLeft);
    row.createCell(3).setCellValue("MNAME");
    sheet.autoSizeColumn(3);
    row.getCell(3).setCellStyle(colStyleTopLeft);
    row.createCell(4).setCellValue("LNM");
    sheet.autoSizeColumn(4);
    row.getCell(4).setCellStyle(colStyleTopLeft);
    row.createCell(5).setCellValue("DOB");
    sheet.autoSizeColumn(5);
    row.getCell(5).setCellStyle(colStyleTopLeft);
    row.createCell(6).setCellValue("ZEID");
    sheet.autoSizeColumn(6);
    row.getCell(6).setCellStyle(colStyleTopLeft);
    row.createCell(7).setCellValue("ZDP");
    sheet.autoSizeColumn(7);
    row.getCell(7).setCellStyle(colStyleTopLeft);
    row.createCell(8).setCellValue("ZPP");
    sheet.autoSizeColumn(8);
    row.getCell(8).setCellStyle(colStyleTopLeft);
    row.createCell(9).setCellValue("ZBIR");
    sheet.autoSizeColumn(9);
    row.getCell(9).setCellStyle(colStyleTopLeft);        
    row.createCell(10).setCellValue("SEX");
    sheet.autoSizeColumn(10);
    row.getCell(10).setCellStyle(colStyleTopLeft); 
    row.createCell(11).setCellValue("PAD1");
    sheet.autoSizeColumn(11);
    row.getCell(11).setCellStyle(colStyleTopLeft); 
    row.createCell(12).setCellValue("PAD2");
    sheet.autoSizeColumn(12);
    row.getCell(12).setCellStyle(colStyleTopLeft); 
    row.createCell(13).setCellValue("PAD3");
    sheet.autoSizeColumn(13);
    row.getCell(13).setCellStyle(colStyleTopLeft); 
    row.createCell(14).setCellValue("PAD4");
    sheet.autoSizeColumn(14);
    row.getCell(14).setCellStyle(colStyleTopLeft);
        row.createCell(15).setCellValue("PCITY");
        sheet.autoSizeColumn(15);
        row.getCell(15).setCellStyle(colStyleTopLeft);
        row.createCell(16).setCellValue("PSTATE");
        sheet.autoSizeColumn(16);
        row.getCell(16).setCellStyle(colStyleTopLeft);        
        row.createCell(17).setCellValue("PZIP");
        sheet.autoSizeColumn(17);
        row.getCell(17).setCellStyle(colStyleTopLeft); 
        row.createCell(18).setCellValue("PCNTRY");
        sheet.autoSizeColumn(18);
        row.getCell(18).setCellStyle(colStyleTopLeft); 
        row.createCell(19).setCellValue("MCNTRY");
        sheet.autoSizeColumn(19);
        row.getCell(19).setCellStyle(colStyleTopLeft); 
        row.createCell(20).setCellValue("MAD1");
        sheet.autoSizeColumn(20);
        row.getCell(20).setCellStyle(colStyleTopLeft); 
        row.createCell(21).setCellValue("MAD2");
        sheet.autoSizeColumn(21);
        row.getCell(21).setCellStyle(colStyleTopLeft);
        row.createCell(22).setCellValue("MAD3");
        sheet.autoSizeColumn(22);
        row.getCell(22).setCellStyle(colStyleTopLeft);
        row.createCell(23).setCellValue("MAD4");
        sheet.autoSizeColumn(23);
        row.getCell(23).setCellStyle(colStyleTopLeft);
        row.createCell(24).setCellValue("MCITY");
        sheet.autoSizeColumn(24);
        row.getCell(24).setCellStyle(colStyleTopLeft);
        row.createCell(25).setCellValue("MSTATE");
        sheet.autoSizeColumn(25);
        row.getCell(25).setCellStyle(colStyleTopLeft);
        row.createCell(26).setCellValue("MZIP");
        sheet.autoSizeColumn(26);
        row.getCell(26).setCellStyle(colStyleTopLeft);
        row.createCell(27).setCellValue("EMAIL");
        sheet.autoSizeColumn(27);
        row.getCell(27).setCellStyle(colStyleTopLeft);
        row.createCell(28).setCellValue("HPH");
        sheet.autoSizeColumn(28);
        row.getCell(28).setCellStyle(colStyleTopLeft);
        row.createCell(29).setCellValue("BPH");
        sheet.autoSizeColumn(29);
        row.getCell(29).setCellStyle(colStyleTopLeft);
        row.createCell(30).setCellValue("BPHEXT");
        sheet.autoSizeColumn(30);
        row.getCell(30).setCellStyle(colStyleTopLeft);
        row.createCell(31).setCellValue("APH");
        sheet.autoSizeColumn(31);
        row.getCell(31).setCellStyle(colStyleTopLeft);
        row.createCell(32).setCellValue("FAXNUM");
        sheet.autoSizeColumn(32);
        row.getCell(32).setCellStyle(colStyleTopLeft);
        row.createCell(33).setCellValue("TAXID");
        sheet.autoSizeColumn(33);
        row.getCell(33).setCellStyle(colStyleTopLeft);
        row.createCell(34).setCellValue("NATION");
        sheet.autoSizeColumn(34);
        row.getCell(34).setCellStyle(colStyleTopLeft);
        row.createCell(35).setCellValue("TAXEXM");
        sheet.autoSizeColumn(35);
        row.getCell(35).setCellStyle(colStyleTopLeft);
        row.createCell(36).setCellValue("ZNATION");
        sheet.autoSizeColumn(36);
        row.getCell(36).setCellStyle(colStyleTopLeft);
        row.createCell(37).setCellValue("ZFRNTAXF");
        sheet.autoSizeColumn(37);
        row.getCell(37).setCellStyle(colStyleTopLeft);
        row.createCell(38).setCellValue("ZFRNTAXD");
        sheet.autoSizeColumn(38);
        row.getCell(38).setCellStyle(colStyleTopLeft);
        row.createCell(39).setCellValue("ZCITRESF");
        sheet.autoSizeColumn(39);
        row.getCell(39).setCellStyle(colStyleTopLeft);
        row.createCell(40).setCellValue("ZPAFLG");
        sheet.autoSizeColumn(40);
        row.getCell(40).setCellStyle(colStyleTopLeft);
        row.createCell(41).setCellValue("ZCRCNTR1");
        sheet.autoSizeColumn(41);
        row.getCell(41).setCellStyle(colStyleTopLeft);
        row.createCell(42).setCellValue("ZCRCNTR2");
        sheet.autoSizeColumn(42);
        row.getCell(42).setCellStyle(colStyleTopLeft);
        row.createCell(43).setCellValue("ZCRCNTR3");
        sheet.autoSizeColumn(43);
        row.getCell(43).setCellStyle(colStyleTopLeft);
        row.createCell(44).setCellValue("ZCRCNTR4");
        sheet.autoSizeColumn(44);
        row.getCell(44).setCellStyle(colStyleTopLeft);
        row.createCell(45).setCellValue("ZRESTIN1");
        sheet.autoSizeColumn(45);
        row.getCell(45).setCellStyle(colStyleTopLeft);
        row.createCell(46).setCellValue("ZRESTIN2");
        sheet.autoSizeColumn(46);
        row.getCell(46).setCellStyle(colStyleTopLeft);
        row.createCell(47).setCellValue("ZRESTIN3");
        sheet.autoSizeColumn(47);
        row.getCell(47).setCellStyle(colStyleTopLeft);
        row.createCell(48).setCellValue("ZRESTIN4");
        sheet.autoSizeColumn(48);
        row.getCell(48).setCellStyle(colStyleTopLeft);
        row.createCell(49).setCellValue("OCC");
        sheet.autoSizeColumn(49);
        row.getCell(49).setCellStyle(colStyleTopLeft);
        row.createCell(50).setCellValue("RESCD");
        sheet.autoSizeColumn(50);
        row.getCell(50).setCellStyle(colStyleTopLeft);
        row.createCell(51).setCellValue("CEMPNAM");
        sheet.autoSizeColumn(51);
        row.getCell(51).setCellStyle(colStyleTopLeft);
        row.createCell(52).setCellValue("CEMPADD1");
        sheet.autoSizeColumn(52);
        row.getCell(52).setCellStyle(colStyleTopLeft);
        row.createCell(53).setCellValue("CEMPADD2");
        sheet.autoSizeColumn(53);
        row.getCell(53).setCellStyle(colStyleTopLeft);
        row.createCell(54).setCellValue("PID");
        sheet.autoSizeColumn(54);
        row.getCell(54).setCellStyle(colStyleTopLeft);
        row.createCell(55).setCellValue("DEP");
        sheet.autoSizeColumn(55);
        row.getCell(55).setCellStyle(colStyleTopLeft);
        row.createCell(56).setCellValue("INC");
        sheet.autoSizeColumn(56);
        row.getCell(56).setCellStyle(colStyleTopLeft);
        row.createCell(57).setCellValue("EDUC");
        sheet.autoSizeColumn(57);
        row.getCell(57).setCellStyle(colStyleTopLeft);
        row.createCell(58).setCellValue("SHHLD");
        sheet.autoSizeColumn(58);
        row.getCell(58).setCellStyle(colStyleTopLeft);
        row.createCell(59).setCellValue("OWN");
        sheet.autoSizeColumn(59);
        row.getCell(59).setCellStyle(colStyleTopLeft);
        row.createCell(60).setCellValue("STRTYP");
        sheet.autoSizeColumn(60);
        row.getCell(60).setCellStyle(colStyleTopLeft);
        row.createCell(61).setCellValue("MONSAL");
        sheet.autoSizeColumn(61);
        row.getCell(61).setCellStyle(colStyleTopLeft);
        row.createCell(62).setCellValue("CEMCITY");
        sheet.autoSizeColumn(62);
        row.getCell(62).setCellStyle(colStyleTopLeft);
        row.createCell(63).setCellValue("MAR");
        sheet.autoSizeColumn(63);
        row.getCell(63).setCellStyle(colStyleTopLeft);
    //1st row ends here
    //2nd row starts here
    idx = idx + 1;
    row = sheet.createRow(idx); //creating 2nd row
    }
        
        
        if (dataRow.getMpsdId() != null)
            row.createCell(0).setCellValue(dataRow.getMpsdId().toString());
        else
            row.createCell(0).setCellValue("");
        sheet.autoSizeColumn(0);
           
        if (dataRow.getMemberPrefix() != null)
            row.createCell(1).setCellValue(dataRow.getMemberPrefix().toString());
        else
            row.createCell(1).setCellValue("");
        sheet.autoSizeColumn(1);

        if (dataRow.getFirstName() != null)
            row.createCell(2).setCellValue(dataRow.getFirstName().toString());
        else
            row.createCell(2).setCellValue("");
        sheet.autoSizeColumn(2);

        if (dataRow.getMiddleName() != null)
            row.createCell(3).setCellValue(dataRow.getMiddleName().toString());
        else
            row.createCell(3).setCellValue("");
        sheet.autoSizeColumn(3);

        if (dataRow.getLastName() != null)
            row.createCell(4).setCellValue(dataRow.getLastName().toString());
        else
            row.createCell(4).setCellValue("");
        sheet.autoSizeColumn(4);

        if (dataRow.getDateOfBirth() != null){
            DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            String today = formatter.format(dataRow.getDateOfBirth());
            row.createCell(5).setCellValue(today);
        }
        else
            row.createCell(5).setCellValue("");
        sheet.autoSizeColumn(5);

        if (dataRow.getElectorialId() != null)
            row.createCell(6).setCellValue(dataRow.getElectorialId().toString());
        else
            row.createCell(6).setCellValue("");
        sheet.autoSizeColumn(6);

        if (dataRow.getDriverPermit() != null)
            row.createCell(7).setCellValue(dataRow.getDriverPermit().toString());
        else
            row.createCell(7).setCellValue("");
        sheet.autoSizeColumn(7);

        if (dataRow.getPassportNo() != null)
            row.createCell(8).setCellValue(dataRow.getPassportNo().toString());
        else
            row.createCell(8).setCellValue("");
        sheet.autoSizeColumn(8);

        if (dataRow.getBirNo() != null)
            row.createCell(9).setCellValue(dataRow.getBirNo().toString());
        else
            row.createCell(9).setCellValue("");
        sheet.autoSizeColumn(9);

        if (dataRow.getGender() != null)
            row.createCell(10).setCellValue(dataRow.getGender().toString());
        else
            row.createCell(10).setCellValue("");
        sheet.autoSizeColumn(10);

        if (dataRow.getPermanentAddrLine1() != null)
            row.createCell(11).setCellValue(dataRow.getPermanentAddrLine1().toString());
        else
            row.createCell(11).setCellValue("");
        sheet.autoSizeColumn(11);

        if (dataRow.getPermanentAddrLine2() != null)
            row.createCell(12).setCellValue(dataRow.getPermanentAddrLine2().toString());
        else
            row.createCell(12).setCellValue("");
        sheet.autoSizeColumn(12);

            if (dataRow.getPermanentAddrLine3() != null)
                row.createCell(13).setCellValue(dataRow.getPermanentAddrLine3().toString());
            else
                row.createCell(13).setCellValue("");
            sheet.autoSizeColumn(13);

        if (dataRow.getPermanentAddrLine4() != null)
            row.createCell(14).setCellValue(dataRow.getPermanentAddrLine4().toString());
        else
            row.createCell(14).setCellValue("");
        sheet.autoSizeColumn(14);
        
            if (dataRow.getPermanentCity() != null)
                row.createCell(15).setCellValue(dataRow.getPermanentCity().toString());
            else
                row.createCell(15).setCellValue("");
            sheet.autoSizeColumn(15);
        
            if (dataRow.getPermanentState() != null)
                row.createCell(16).setCellValue(dataRow.getPermanentState().toString());
            else
                row.createCell(16).setCellValue("");
            sheet.autoSizeColumn(16);
        
            if (dataRow.getPermanentZipCode() != null)
                row.createCell(17).setCellValue(dataRow.getPermanentZipCode().toString());
            else
                row.createCell(17).setCellValue("");
            sheet.autoSizeColumn(17);
        
            if (dataRow.getPermanentCountryCode() != null)
                row.createCell(18).setCellValue(dataRow.getPermanentCountryCode().toString());
            else
                row.createCell(18).setCellValue("");
            sheet.autoSizeColumn(18);
        
            if (dataRow.getMailingCountryCode() != null)
                row.createCell(19).setCellValue(dataRow.getMailingCountryCode().toString());
            else
                row.createCell(19).setCellValue("");
            sheet.autoSizeColumn(19);
        
            if (dataRow.getMailingAddrLine1() != null)
                row.createCell(20).setCellValue(dataRow.getMailingAddrLine1().toString());
            else
                row.createCell(20).setCellValue("");
            sheet.autoSizeColumn(20);
        
            if (dataRow.getMailingAddrLine2() != null)
                row.createCell(21).setCellValue(dataRow.getMailingAddrLine2().toString());
            else
                row.createCell(21).setCellValue("");
            sheet.autoSizeColumn(21);
        
            if (dataRow.getMailingAddrLine3() != null)
                row.createCell(22).setCellValue(dataRow.getMailingAddrLine3().toString());
            else
                row.createCell(22).setCellValue("");
            sheet.autoSizeColumn(22);
        
            if (dataRow.getMailingAddrLine4() != null)
                row.createCell(23).setCellValue(dataRow.getMailingAddrLine4().toString());
            else
                row.createCell(23).setCellValue("");
            sheet.autoSizeColumn(23);
        
            if (dataRow.getMailingCity() != null)
                row.createCell(24).setCellValue(dataRow.getMailingCity().toString());
            else
                row.createCell(24).setCellValue("");
            sheet.autoSizeColumn(24);
        
            if (dataRow.getMailingState() != null)
                row.createCell(25).setCellValue(dataRow.getMailingState().toString());
            else
                row.createCell(25).setCellValue("");
            sheet.autoSizeColumn(25);
        
            if (dataRow.getMailingZipCode() != null)
                row.createCell(26).setCellValue(dataRow.getMailingZipCode().toString());
            else
                row.createCell(26).setCellValue("");
            sheet.autoSizeColumn(26);
        
            if (dataRow.getEmail() != null)
                row.createCell(27).setCellValue(dataRow.getEmail().toString());
            else
                row.createCell(27).setCellValue("");
            sheet.autoSizeColumn(27);
        
            if (dataRow.getHomePhoneNumber() != null)
                row.createCell(28).setCellValue(dataRow.getHomePhoneNumber().toString());
            else
                row.createCell(28).setCellValue("");
            sheet.autoSizeColumn(28);
        
            if (dataRow.getBusinessPhoneNumber() != null)
                row.createCell(29).setCellValue(dataRow.getBusinessPhoneNumber().toString());
            else
                row.createCell(29).setCellValue("");
            sheet.autoSizeColumn(29);
        
            if (dataRow.getBusinessPhoneExtn() != null)
                row.createCell(30).setCellValue(dataRow.getBusinessPhoneExtn().toString());
            else
                row.createCell(30).setCellValue("");
            sheet.autoSizeColumn(30);
        
            if (dataRow.getMobilePhoneNumber() != null)
                row.createCell(31).setCellValue(dataRow.getMobilePhoneNumber().toString());
            else
                row.createCell(31).setCellValue("");
            sheet.autoSizeColumn(31);
        
            if (dataRow.getFaxNumber() != null)
                row.createCell(32).setCellValue(dataRow.getFaxNumber().toString());
            else
                row.createCell(32).setCellValue("");
            sheet.autoSizeColumn(32);

            row.createCell(33).setCellValue("");
            sheet.autoSizeColumn(33);

            if (dataRow.getBirthCountryCode() != null)
                row.createCell(34).setCellValue(dataRow.getBirthCountryCode().toString());
            else
                row.createCell(34).setCellValue("");
            sheet.autoSizeColumn(34);
        
            if (dataRow.getLocalTaxExempt() != null)
                row.createCell(35).setCellValue(dataRow.getLocalTaxExempt().toString());
            else
                row.createCell(35).setCellValue("");
            sheet.autoSizeColumn(35);
        
            if (dataRow.getNationality() != null)
                row.createCell(36).setCellValue(dataRow.getNationality().toString());
            else
                row.createCell(36).setCellValue("");
            sheet.autoSizeColumn(36);
        
            if (dataRow.getEligibleForeignTax() != null)
                row.createCell(37).setCellValue(dataRow.getEligibleForeignTax().toString());
            else
                row.createCell(37).setCellValue("");
            sheet.autoSizeColumn(37);
        
            if (dataRow.getDocForeignTaxExempt() != null)
                row.createCell(38).setCellValue(dataRow.getDocForeignTaxExempt().toString());
            else
                row.createCell(38).setCellValue("");
            sheet.autoSizeColumn(38);
        
            if (dataRow.getForeignCitizenship() != null)
                row.createCell(39).setCellValue(dataRow.getForeignCitizenship().toString());
            else
                row.createCell(39).setCellValue("");
            sheet.autoSizeColumn(39);
        
            if (dataRow.getPowerOfAttorney() != null)
                row.createCell(40).setCellValue(dataRow.getPowerOfAttorney().toString());
            else
                row.createCell(40).setCellValue("");
            sheet.autoSizeColumn(40);
        
            if (dataRow.getCitizenShipCountry1() != null)
                row.createCell(41).setCellValue(dataRow.getCitizenShipCountry1().toString());
            else
                row.createCell(41).setCellValue("");
            sheet.autoSizeColumn(41);
        
            if (dataRow.getCitizenShipCountry2() != null)
                row.createCell(42).setCellValue(dataRow.getCitizenShipCountry2().toString());
            else
                row.createCell(42).setCellValue("");
            sheet.autoSizeColumn(42);
        
            if (dataRow.getCitizenShipCountry3() != null)
                row.createCell(43).setCellValue(dataRow.getCitizenShipCountry3().toString());
            else
                row.createCell(43).setCellValue("");
            sheet.autoSizeColumn(43);

            if (dataRow.getCitizenShipCountry4() != null)
                row.createCell(44).setCellValue(dataRow.getCitizenShipCountry4().toString());
            else
                row.createCell(44).setCellValue("");
            sheet.autoSizeColumn(44);

            row.createCell(45).setCellValue("");
            sheet.autoSizeColumn(45);

            row.createCell(46).setCellValue("");
            sheet.autoSizeColumn(46);

            row.createCell(47).setCellValue("");
            sheet.autoSizeColumn(47);

            row.createCell(48).setCellValue("");
            sheet.autoSizeColumn(48);

            if (dataRow.getOccupationCode() != null)
                row.createCell(49).setCellValue(dataRow.getOccupationCode().toString());
            else
                row.createCell(49).setCellValue("");
            sheet.autoSizeColumn(49);

            if (dataRow.getResidencyCode() != null)
                row.createCell(50).setCellValue(dataRow.getResidencyCode().toString());
            else
                row.createCell(50).setCellValue("");
            sheet.autoSizeColumn(50);

            if (dataRow.getEmployer() != null)
                row.createCell(51).setCellValue(dataRow.getEmployer().toString());
            else
                row.createCell(51).setCellValue("");
            sheet.autoSizeColumn(51);

            if (dataRow.getEmployerAddress1() != null)
                row.createCell(52).setCellValue(dataRow.getEmployerAddress1().toString());
            else
                row.createCell(52).setCellValue("");
            sheet.autoSizeColumn(52);

            if (dataRow.getEmployerAddress2() != null)
                row.createCell(53).setCellValue(dataRow.getEmployerAddress2().toString());
            else
                row.createCell(53).setCellValue("");
            sheet.autoSizeColumn(53);

            if (dataRow.getMotherMaidenName() != null)
                row.createCell(54).setCellValue(dataRow.getMotherMaidenName().toString());
            else
                row.createCell(54).setCellValue("");
            sheet.autoSizeColumn(54);

            if (dataRow.getNoOfDependents() != null)
                row.createCell(55).setCellValue(dataRow.getNoOfDependents().toString());
            else
                row.createCell(55).setCellValue("");
            sheet.autoSizeColumn(55);

            if (dataRow.getAnnualIncome() != null)
                row.createCell(56).setCellValue(dataRow.getAnnualIncome().toString());
            else
                row.createCell(56).setCellValue("");
            sheet.autoSizeColumn(56);

            if (dataRow.getEducationCode() != null)
                row.createCell(57).setCellValue(dataRow.getEducationCode().toString());
            else
                row.createCell(57).setCellValue("");
            sheet.autoSizeColumn(57);

            if (dataRow.getShareholderCode() != null)
                row.createCell(58).setCellValue(dataRow.getShareholderCode().toString());
            else
                row.createCell(58).setCellValue("");
            sheet.autoSizeColumn(58);

            if (dataRow.getHomeOwnership() != null)
                row.createCell(59).setCellValue(dataRow.getHomeOwnership().toString());
            else
                row.createCell(59).setCellValue("");
            sheet.autoSizeColumn(59);

            row.createCell(60).setCellValue("");
            sheet.autoSizeColumn(60);

            if (dataRow.getMonthlySalary() != null)
                row.createCell(61).setCellValue(dataRow.getMonthlySalary().toString());
            else
                row.createCell(61).setCellValue("");
            sheet.autoSizeColumn(61);

            row.createCell(62).setCellValue("");
            sheet.autoSizeColumn(62);

            if (dataRow.getMaritalStatus() != null)
                row.createCell(63).setCellValue(dataRow.getMaritalStatus().toString());
            else
                row.createCell(63).setCellValue("");
            sheet.autoSizeColumn(63);
        
        
    //2nd Row ends
    flag = true; 
    idx = idx + 1;
    }
    List list = new ArrayList();
    list.add(wb);
    return list;
    }
    
    public List createExportCardTopupDetailsWb() {
    HSSFWorkbook wb = new HSSFWorkbook();
    HSSFSheet sheet = wb.createSheet("CardDetails"); //Sheet Name
    int idx = 0; // rows index
    //Creating styles code starts
    HSSFFont colHdrFont = wb.createFont();
    colHdrFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
    HSSFFont fontSizeHrd = wb.createFont();
    fontSizeHrd.setFontHeightInPoints((short) 16); //setting Headding font size
    fontSizeHrd.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
    HSSFCellStyle colStyleHrdWithFont = wb.createCellStyle();
    colStyleHrdWithFont.setFont(fontSizeHrd);

    HSSFCellStyle colStyleTopLeft = wb.createCellStyle();
    colStyleTopLeft.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeft.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeft.setFont(colHdrFont);
    HSSFCellStyle colStyleTopLeftWithCenter = wb.createCellStyle();
    colStyleTopLeftWithCenter.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeftWithCenter.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeftWithCenter.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopLeftWithCenter.setAlignment(CellStyle.ALIGN_CENTER);
    colStyleTopLeftWithCenter.setFont(colHdrFont);
    HSSFCellStyle colStyleLeft = wb.createCellStyle();
    colStyleLeft.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeft.setFont(colHdrFont);
    HSSFCellStyle colStyleLeftDealNo = wb.createCellStyle();
    colStyleLeftDealNo.setAlignment(CellStyle.ALIGN_LEFT);
    HSSFCellStyle colStyleLeftDept = wb.createCellStyle();
    colStyleLeftDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftDept.setFont(colHdrFont);
    HSSFCellStyle colStyleOnlyRight = wb.createCellStyle();
    colStyleOnlyRight.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleOnlyRightDept = wb.createCellStyle();
    colStyleOnlyRightDept.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleOnlyRightDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleOnlyRightDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleLeftBottom = wb.createCellStyle();
    colStyleLeftBottom.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftBottom.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftBottom.setFont(colHdrFont);
    HSSFCellStyle colStyleLeftBottomWithOutHrd = wb.createCellStyle();
    colStyleLeftBottomWithOutHrd.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleLeftBottomWithOutHrd.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleRightBottomWithOutHrd = wb.createCellStyle();
    colStyleRightBottomWithOutHrd.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleRightBottomWithOutHrd.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleRightBottomWithOutHrdDept = wb.createCellStyle();
    colStyleRightBottomWithOutHrdDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleRightBottomWithOutHrdDept.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleRightBottomWithOutHrdDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleTop = wb.createCellStyle();
    colStyleTop.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTop.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleTop.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTop.setAlignment(CellStyle.ALIGN_CENTER);
    colStyleTop.setFont(colHdrFont);
    HSSFCellStyle colStyleTopRight = wb.createCellStyle();
    colStyleTopRight.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopRight.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopRight.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleTopRight.setAlignment(CellStyle.ALIGN_CENTER);
    colStyleTopRight.setFont(colHdrFont);
    HSSFCellStyle colStyleTopWithOutHrd = wb.createCellStyle();
    colStyleTopWithOutHrd.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleBottom = wb.createCellStyle();
    colStyleBottom.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    HSSFCellStyle colStyleBottomWithHrd = wb.createCellStyle();
    colStyleBottomWithHrd.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleBottomWithHrd.setFont(colHdrFont);
    HSSFCellStyle colStyleRight = wb.createCellStyle();
    colStyleRight.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
    colStyleRight.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
    colStyleRight.setFont(colHdrFont);
    HSSFCellStyle colStyleHrd = wb.createCellStyle();
    colStyleHrd.setFont(colHdrFont);
    HSSFCellStyle colStyleHrdDept = wb.createCellStyle();
    colStyleHrdDept.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
    colStyleHrdDept.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
    colStyleHrdDept.setFont(colHdrFont);
    //Creating styles code ends
    HSSFRow row = null;
    LincuMemberCardVOImpl cardDetails = this.getLincuMemberCard();
    RowSetIterator rowIter = cardDetails.createRowSetIterator(null); //creating secoundary Iterator
    rowIter.reset();
    Boolean flag = false;
    LincuMemberCardVORowImpl dataRow;
    while (rowIter.hasNext()) { 
    row = sheet.createRow(idx); //creating 1st row
    dataRow = (LincuMemberCardVORowImpl) rowIter.next();
    if(flag == false){

    row.createCell(0).setCellValue("CIF Number"); //setting column heading
    sheet.autoSizeColumn(0);
    row.getCell(0).setCellStyle(colStyleTopLeft);
    row.createCell(1).setCellValue("Amount");
    sheet.autoSizeColumn(1);
    row.getCell(1).setCellStyle(colStyleTopLeft);
    row.createCell(2).setCellValue("Customer Name");
    sheet.autoSizeColumn(2);
    row.getCell(2).setCellStyle(colStyleTopLeft);
    row.createCell(3).setCellValue("File Trailer");
    sheet.autoSizeColumn(3);
    row.getCell(3).setCellStyle(colStyleTopLeft);
    
    idx = idx + 1;
    row = sheet.createRow(idx); //creating 2nd row
    }
        
           
        if (dataRow.getCifNumber1() != null)
            row.createCell(0).setCellValue(dataRow.getCifNumber1().toString());
        else
            row.createCell(0).setCellValue("");
        sheet.autoSizeColumn(0);

        if (dataRow.getTopupAmount() != null)
            row.createCell(1).setCellValue(dataRow.getTopupAmount().toString());
        else
            row.createCell(1).setCellValue("");
        sheet.autoSizeColumn(1);

        if ((dataRow.getFirstName() != null) && (dataRow.getLastName() != null))
            row.createCell(2).setCellValue(dataRow.getFirstName().concat(" ").concat(dataRow.getLastName()));
        else
            row.createCell(2).setCellValue("");
        sheet.autoSizeColumn(2);
        
        row.createCell(3).setCellValue("99999");
        sheet.autoSizeColumn(3);

    //2nd Row ends
    flag = true; 
    idx = idx + 1;
    }
    List list = new ArrayList();
    list.add(wb);
    return list;
    }

    /**
     * Container's getter for YesOrNoVVO2.
     * @return YesOrNoVVO2
     */
    public ViewObjectImpl getYesOrNoVO() {
        return (ViewObjectImpl) findViewObject("YesOrNoVO");
    }
    
    public Boolean deleteCreditUnionAllowed(){
        CreditUnionBranchVOImpl creditUnionBranchVOImpl = this.getCreditUnionBranch1();
        int rowCount = creditUnionBranchVOImpl.getRowCount();
        if(rowCount > 0){
           return false; 
        }else{
            return true;
        }
    }
    
    public Boolean deleteMemeberAllowed(){
         LincuMemberVOImpl memberVO = this.getLincuMember();
        LincuMemberVORowImpl memberRow = (LincuMemberVORowImpl)memberVO.getCurrentRow();
        LincuMemberCardVOImpl cardVO = this.getLincuMemberCard1();
        Row[] cardRows = cardVO.getFilteredRows("MemberId", memberRow.getMemberId());
        if(cardRows != null && cardRows.length > 0){
            return false;
        }else{
            return true;
        }
    }
    
    public Boolean deleteBranchesAllowed(){
         CreditUnionBranchVOImpl branchVO = this.getCreditUnionBranch();
        CreditUnionBranchVORowImpl branchRow = (CreditUnionBranchVORowImpl)branchVO.getCurrentRow();
        LincuMemberVOImpl memberVO = this.getLincuMember1();
        LincuUserInfoVOImpl userVO = this.getLincuUserInfo1();
        
        Row[] memberRows = memberVO.getFilteredRows("CreditUnionBranchId", branchRow.getCreditUnionBranchId());
        Row[] userRows = userVO.getFilteredRows("CreditUnionBranchId", branchRow.getCreditUnionBranchId());
        if(memberRows != null && memberRows.length > 0){
            return false;
        }else if(userRows != null && userRows.length > 0){
           return false; 
        }else{
            return true;
        }
    }

    /**
     * Container's getter for LincuUnionsVVO1.
     * @return LincuUnionsVVO1
     */
    public LincuUnionsVVOImpl getReadOnlyLincuUnions() {
        return (LincuUnionsVVOImpl) findViewObject("ReadOnlyLincuUnions");
    }
    
    private String findCreditUnionName(String credtiUnionId){
        String creditUnionName = null;
         LincuUnionsVVOImpl lincuUnionsVVOImpl = this.getReadOnlyLincuUnions();
         Row[] rows = lincuUnionsVVOImpl.findByKey(new Key(new Object[]{credtiUnionId}), 1);
         if(rows != null){
             LincuUnionsVVORowImpl row = (LincuUnionsVVORowImpl)rows[0];
             creditUnionName = row.getCreditUnionName();
         }
        return creditUnionName;
    }
    
    private String findCreditUnionCodeById(String credtiUnionId){
        String creditUnionName = null;
         LincuUnionsVVOImpl lincuUnionsVVOImpl = this.getReadOnlyLincuUnions();
         Row[] rows = lincuUnionsVVOImpl.findByKey(new Key(new Object[]{credtiUnionId}), 1);
         if(rows != null){
             LincuUnionsVVORowImpl row = (LincuUnionsVVORowImpl)rows[0];
             creditUnionName = row.getCreditUnionCode();
         }
        return creditUnionName;
    }


    /**
     * Container's getter for LincuMemberCardDocsVO1.
     * @return LincuMemberCardDocsVO1
     */
    public LincuMemberCardDocsVOImpl getReadOnlyDocs() {
        return (LincuMemberCardDocsVOImpl) findViewObject("ReadOnlyDocs");
    }

    /**
     * Container's getter for CreditUnionCardToReadOnlyDocsVL1.
     * @return CreditUnionCardToReadOnlyDocsVL1
     */
    public ViewLinkImpl getCreditUnionCardToReadOnlyDocsVL1() {
        return (ViewLinkImpl) findViewLink("CreditUnionCardToReadOnlyDocsVL1");
    }


    public Integer findApplicationPerCardType(String cardType, String memberId){
        CardApplicationVVOImpl applications = this.getCardApplication();
        applications.setbindCardType(cardType);
        applications.setbindMemberId(memberId);
        applications.executeQuery();
        return applications.getRowCount();
    }
    
    public String findCIFNumberPerCardType(String cardId){
        CardApplicationVVOImpl applications = this.getCardApplicationCIFNumber();
        Row[] rows = applications.findByKey(new Key(new Object[]{cardId}), 1);
        if((rows != null) && (rows.length > 0)){
          CardApplicationVVORowImpl row = (CardApplicationVVORowImpl)rows[0];  
            return row.getCifNumber();
        }else{
            return null;
        }
    }
    
    public String findCIFNumberForCardTypeNew(String cardType, String memberId){
        CardApplicationVVOImpl applications = this.getCardApplication();
        applications.setbindCardType(cardType);
        applications.setbindMemberId(memberId);
        applications.executeQuery();
        Row[] rows = applications.getAllRowsInRange();
        if((rows != null) && (rows.length > 0)){
          CardApplicationVVORowImpl row = (CardApplicationVVORowImpl)rows[0];  
            return row.getCifNumber();
        }else{
            return null;
        }
    }
    
    public BigDecimal cardTotalTopupToday(BigDecimal cardId){
        CardApplicationVVOImpl applications = this.getCardTodayTopup();
        applications.setbindCardId(cardId);
        applications.executeQuery();
        Row[] rows = applications.getAllRowsInRange();
        BigDecimal topupSum = new BigDecimal(0);
        for(Row row : rows){
            CardApplicationVVORowImpl cardRow = (CardApplicationVVORowImpl) row;
            topupSum = topupSum.add(cardRow.getTopupAmount());
        }
        return topupSum;
    }

    /**
     * Container's getter for CardApplicationVVO1.
     * @return CardApplicationVVO1
     */
    public CardApplicationVVOImpl getCardApplication() {
        return (CardApplicationVVOImpl) findViewObject("CardApplication");
    }

    /**
     * Container's getter for CreditUnionBranchVO1.
     * @return CreditUnionBranchVO1
     */
    public CreditUnionBranchVOImpl getCreditUnionBranch1() {
        return (CreditUnionBranchVOImpl) findViewObject("CreditUnionBranch1");
    }

    /**
     * Container's getter for CreditUnionToBranchVL1.
     * @return CreditUnionToBranchVL1
     */
    public ViewLinkImpl getCreditUnionToBranchVL1() {
        return (ViewLinkImpl) findViewLink("CreditUnionToBranchVL1");
    }

    /**
     * Container's getter for LincuMemberVO1.
     * @return LincuMemberVO1
     */
    public LincuMemberVOImpl getLincuMember1() {
        return (LincuMemberVOImpl) findViewObject("LincuMember1");
    }

    /**
     * Container's getter for LincuUserInfoVO1.
     * @return LincuUserInfoVO1
     */
    public LincuUserInfoVOImpl getLincuUserInfo1() {
        return (LincuUserInfoVOImpl) findViewObject("LincuUserInfo1");
    }

    /**
     * Container's getter for LincuMemberCardVO1.
     * @return LincuMemberCardVO1
     */
    public LincuMemberCardVOImpl getLincuMemberCard1() {
        return (LincuMemberCardVOImpl) findViewObject("LincuMemberCard1");
    }
    
    public String findCreditUnionIdByCode(String code){
        Row[] selectedRows = this.getCreditUnion().getFilteredRows("CreditUnionCode", code);
        for(Row row : selectedRows){
            CreditUnionVORowImpl unionRow = (CreditUnionVORowImpl)row;
            return unionRow.getCreditUnionId();
        }
        return null;
    }
    
    public String findCreditUnionBranchIdByCode(String code){
        Row[] selectedRows = this.getCreditUnionBranch2().getFilteredRows("CreditUnionBranchCode", code);
        for(Row row : selectedRows){
            CreditUnionBranchVORowImpl branchRow = (CreditUnionBranchVORowImpl)row;
            return branchRow.getCreditUnionBranchId();
        }
        return null;
    }
    
    public String findCreditUnionBranchNameById(String branchId){
        Row[] selectedRows = this.getCreditUnionBranch2().getFilteredRows("CreditUnionBranchId", branchId);
        for(Row row : selectedRows){
            CreditUnionBranchVORowImpl branchRow = (CreditUnionBranchVORowImpl)row;
            return branchRow.getCreditUnionBranchName();
        }
        return null;
    }
    
    public String findCreditUnionBranchCodeById(String branchId){
        Row[] selectedRows = this.getCreditUnionBranch2().getFilteredRows("CreditUnionBranchId", branchId);
        for(Row row : selectedRows){
            CreditUnionBranchVORowImpl branchRow = (CreditUnionBranchVORowImpl)row;
            return branchRow.getCreditUnionBranchCode();
        }
        return null;
    }
    
//    public String findMemberNoById(String memberId){
//        Row[] selectedRows = this.getLincuMember1().getFilteredRows("CreditUnionBranchId", memberId);
//        for(Row row : selectedRows){
//            LincuMemberVORowImpl memberRow = (LincuMemberVORowImpl)row;
//            return memberRow.getMemberNo();
//        }
//        return null;
//    }

    /**
     * Container's getter for CreditUnionBranchVO1.
     * @return CreditUnionBranchVO1
     */
    public CreditUnionBranchVOImpl getCreditUnionBranch2() {
        return (CreditUnionBranchVOImpl) findViewObject("CreditUnionBranch2");
    }
    
    public Map downloadApplication(){
        LookupValuesForExcel excelLookups = new LookupValuesForExcel();
            //Map<String, String> countryMap = excelLookups.getCountries();
            //Map<String, String> occupationMap = excelLookups.getOccupationCode();
            //Map<String, String> maritalStatus = excelLookups.getMaritalStatues(); 
            //Map<String, String> streets = excelLookups.getStreet();    
            //Map<String, String> currencies = excelLookups.getCurrenciesRanges();
            //Map<String, String> educationCodes = excelLookups.getEducationCodes();
            Map<String, String> yesOrNoCodes = excelLookups.getYesOrNoCodes();  
            Map<String, String> genderCodes = excelLookups.getGenderCodes();   
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        //Date date = new Date();
        Map<String, String> downloadApplicationMap = new HashMap<String, String>();
        
        LincuMemberCardVOImpl memberCard =  this.getLincuMemberCard();
         LincuMemberCardVORowImpl memberCardRow = (LincuMemberCardVORowImpl)memberCard.getCurrentRow();
        
        if (memberCardRow.getCreditUnionId() != null) {
            downloadApplicationMap.put("CREDIT_UNION", findCreditUnionName(memberCardRow.getCreditUnionId()));
        } else {
            downloadApplicationMap.put("CREDIT_UNION", "");
        }
        if (memberCardRow.getCreditUnionBranchId() != null) {
            downloadApplicationMap.put("CREDIT_UNION_BRANCH", findCreditUnionBranchNameById(memberCardRow.getCreditUnionBranchId()));
        } else {
            downloadApplicationMap.put("CREDIT_UNION_BRANCH", "");
        }
        if (memberCardRow.getMemberNo() != null) {
            downloadApplicationMap.put("MEMBER_NO", memberCardRow.getMemberNo());
        } else {
            downloadApplicationMap.put("MEMBER_NO", "");
        }
        if (memberCardRow.getMemberPrefix() != null) {
            downloadApplicationMap.put("PREFIX", memberCardRow.getMemberPrefix());
        } else {
            downloadApplicationMap.put("PREFIX", "");
        }
        if (memberCardRow.getFirstName() != null) {
            downloadApplicationMap.put("FIRST_NAME", memberCardRow.getFirstName());
        } else {
            downloadApplicationMap.put("FIRST_NAME", "");
        }
        if (memberCardRow.getMiddleName() != null) {
            downloadApplicationMap.put("MIDDLE_NAME", memberCardRow.getMiddleName());
        } else {
            downloadApplicationMap.put("MIDDLE_NAME", "");
        }
        if (memberCardRow.getLastName() != null) {
            downloadApplicationMap.put("LAST_NAME", memberCardRow.getLastName());
        } else {
            downloadApplicationMap.put("LAST_NAME", "");
        }
        if (memberCardRow.getMotherMaidenName() != null) {
            downloadApplicationMap.put("MOTHER_MAIDEN_NAME", memberCardRow.getMotherMaidenName());
        } else {
            downloadApplicationMap.put("MOTHER_MAIDEN_NAME", "");
        }
        if (memberCardRow.getDateOfBirth() != null) {
            downloadApplicationMap.put("DOB", dateFormat.format(memberCardRow.getDateOfBirth()));
            //downloadApplicationMap.put("DOB", memberCardRow.getDateOfBirth().toString());
        } else {
            downloadApplicationMap.put("DOB", "");
        }
        if (memberCardRow.getEmail() != null) {
            downloadApplicationMap.put("EMAIL", memberCardRow.getEmail());
        } else {
            downloadApplicationMap.put("EMAIL", "");
        }
        if (memberCardRow.getGender() != null) {
            downloadApplicationMap.put("GENDER", genderCodes.get(memberCardRow.getGender()));
        } else {
            downloadApplicationMap.put("GENDER", "");
        }
        if (memberCardRow.getMaritalStatus() != null) {
            downloadApplicationMap.put("MARITAL_STATUS", findLookupDesc("MARITAL_STATUS",memberCardRow.getMaritalStatus()));
        } else {
            downloadApplicationMap.put("MARITAL_STATUS", "");
        }
        if (memberCardRow.getNoOfDependents() != null) {
            downloadApplicationMap.put("NO_OF_DEPENDENTS", memberCardRow.getNoOfDependents().toString());
        } else {
            downloadApplicationMap.put("NO_OF_DEPENDENTS", "");
        }
        if (memberCardRow.getElectorialId() != null) {
            downloadApplicationMap.put("NATIONAL_ID", memberCardRow.getElectorialId());
        } else {
            downloadApplicationMap.put("NATIONAL_ID", "");
        }
        if (memberCardRow.getPassportNo() != null) {
            downloadApplicationMap.put("PASSPORT", memberCardRow.getPassportNo());
        } else {
            downloadApplicationMap.put("PASSPORT", "");
        }
        if (memberCardRow.getDriverPermit() != null) {
            downloadApplicationMap.put("DRIVING_LICENCE", memberCardRow.getDriverPermit());
        } else {
            downloadApplicationMap.put("DRIVING_LICENCE", "");
        }
        if (memberCardRow.getBirNo() != null) {
            downloadApplicationMap.put("BIR", memberCardRow.getBirNo());
        } else {
            downloadApplicationMap.put("BIR", "");
        }
        if (memberCardRow.getHomePhoneNumber() != null) {
            downloadApplicationMap.put("HOME_PHONE", memberCardRow.getHomePhoneNumber());
        } else {
            downloadApplicationMap.put("HOME_PHONE", "");
        }
        if (memberCardRow.getMobilePhoneNumber() != null) {
            downloadApplicationMap.put("MOBILE_PHONE", memberCardRow.getMobilePhoneNumber());
        } else {
            downloadApplicationMap.put("MOBILE_PHONE", "");
        }
        if (memberCardRow.getFaxNumber() != null) {
            downloadApplicationMap.put("FAX_NUMBER", memberCardRow.getFaxNumber());
        } else {
            downloadApplicationMap.put("FAX_NUMBER", "");
        }
        if (memberCardRow.getEducationCode() != null) {
            downloadApplicationMap.put("EDUCATION", findLookupDesc("EDUCATION_CODE",memberCardRow.getEducationCode()));
        } else {
            downloadApplicationMap.put("EDUCATION", "");
        }
        if (memberCardRow.getMonthlySalary() != null) {
            downloadApplicationMap.put("MONTHLY_SALARY", findLookupDesc("CURRENCY",memberCardRow.getAnnualIncome().toString()));
        } else {
            downloadApplicationMap.put("MONTHLY_SALARY", "");
        }
        if (memberCardRow.getShareholderCode() != null) {
            downloadApplicationMap.put("FCB_SHAREHOLDING", memberCardRow.getShareholderCode());
        } else {
            downloadApplicationMap.put("FCB_SHAREHOLDING", "");
        }
        if (memberCardRow.getPermanentAddrLine1() != null) {
            downloadApplicationMap.put("PER_ADD_LINE1", memberCardRow.getPermanentAddrLine1());
        } else {
            downloadApplicationMap.put("PER_ADD_LINE1", "");
        }
        if (memberCardRow.getPermanentAddrLine2() != null) {
            downloadApplicationMap.put("PER_ADD_LINE2", memberCardRow.getPermanentAddrLine2());
        } else {
            downloadApplicationMap.put("PER_ADD_LINE2", "");
        }
        if (memberCardRow.getPermanentAddrLine3() != null) {
            downloadApplicationMap.put("PER_ADD_LINE3", memberCardRow.getPermanentAddrLine3());
        } else {
            downloadApplicationMap.put("PER_ADD_LINE3", "");
        }
        if (memberCardRow.getPermanentAddrLine4() != null) {
            downloadApplicationMap.put("PER_STREET", findLookupDesc("STREET_TYPE",memberCardRow.getPermanentAddrLine4()));
        } else {
            downloadApplicationMap.put("PER_STREET", "");
        }
        if (memberCardRow.getPermanentCity() != null) {
            downloadApplicationMap.put("PER_CITY", memberCardRow.getPermanentCity());
        } else {
            downloadApplicationMap.put("PER_CITY", "");
        }
        if (memberCardRow.getPermanentState() != null) {
            downloadApplicationMap.put("PER_STATE", memberCardRow.getPermanentState());
        } else {
            downloadApplicationMap.put("PER_STATE", "");
        }
        if (memberCardRow.getPermanentCountryCode() != null) {
            downloadApplicationMap.put("PER_COUNTRY", findCountryNames("COUNTRY", memberCardRow.getPermanentCountryCode().toString()));
        } else {
            downloadApplicationMap.put("PER_COUNTRY", "");
        }
        if (memberCardRow.getPermanentZipCode() != null) {
            downloadApplicationMap.put("PER_ZIP", memberCardRow.getPermanentZipCode());
        } else {
            downloadApplicationMap.put("PER_ZIP", "");
        }
        if (memberCardRow.getHomeOwnership() != null) {
            downloadApplicationMap.put("PER_HOMETOWNSHIP", memberCardRow.getHomeOwnership());
        } else {
            downloadApplicationMap.put("PER_HOMETOWNSHIP", "");
        }
        if (memberCardRow.getMailingAddrLine1() != null) {
            downloadApplicationMap.put("MAIL_ADD_LINE1", memberCardRow.getMailingAddrLine1());
        } else {
            downloadApplicationMap.put("MAIL_ADD_LINE1", "");
        }
        if (memberCardRow.getMailingAddrLine2() != null) {
            downloadApplicationMap.put("MAIL_ADD_LINE2", memberCardRow.getMailingAddrLine2());
        } else {
            downloadApplicationMap.put("MAIL_ADD_LINE2", "");
        }
        if (memberCardRow.getMailingAddrLine3() != null) {
            downloadApplicationMap.put("MAIL_ADD_LINE3", memberCardRow.getMailingAddrLine3());
        } else {
            downloadApplicationMap.put("MAIL_ADD_LINE3", "");
        }
        if (memberCardRow.getMailingAddrLine4() != null) {
            downloadApplicationMap.put("MAIL_ADD_STREET", findLookupDesc("STREET_TYPE",memberCardRow.getMailingAddrLine4()));
        } else {
            downloadApplicationMap.put("MAIL_ADD_STREET", "");
        }
        if (memberCardRow.getMailingCity() != null) {
            downloadApplicationMap.put("MAIL_ADD_CITY", memberCardRow.getMailingCity());
        } else {
            downloadApplicationMap.put("MAIL_ADD_CITY", "");
        }
        if (memberCardRow.getMailingState() != null) {
            downloadApplicationMap.put("MAIL_ADD_STATE", memberCardRow.getMailingState());
        } else {
            downloadApplicationMap.put("MAIL_ADD_STATE", "");
        }
        if (memberCardRow.getMailingCountryCode() != null) {
            downloadApplicationMap.put("MAIL_ADD_COUNTRY", findCountryNames("COUNTRY", memberCardRow.getMailingCountryCode().toString()));
        } else {
            downloadApplicationMap.put("MAIL_ADD_COUNTRY", "");
        }
        if (memberCardRow.getMailingZipCode() != null) {
            downloadApplicationMap.put("MAIL_ADD_ZIP", memberCardRow.getMailingZipCode());
        } else {
            downloadApplicationMap.put("MAIL_ADD_ZIP", "");
        }
        if (memberCardRow.getEmployer() != null) {
            downloadApplicationMap.put("EMP_NAME", memberCardRow.getEmployer());
        } else {
            downloadApplicationMap.put("EMP_NAME", "");
        }
        if (memberCardRow.getOccupationCode() != null) {
            downloadApplicationMap.put("EMP_OCCUPATION", findOccupationDesc(memberCardRow.getOccupationCode().toString()));
        } else {
            downloadApplicationMap.put("EMP_OCCUPATION", "");
        }
        if (memberCardRow.getEmployerAddress1() != null) {
            downloadApplicationMap.put("EMP_ADD_LINE1", memberCardRow.getEmployerAddress1());
        } else {
            downloadApplicationMap.put("EMP_ADD_LINE1", "");
        }
        if (memberCardRow.getEmployerAddress2() != null) {
            downloadApplicationMap.put("EMP_ADD_LINE2", memberCardRow.getEmployerAddress2());
        } else {
            downloadApplicationMap.put("EMP_ADD_LINE2", "");
        }
        if (memberCardRow.getEmployerCity() != null) {
            downloadApplicationMap.put("EMP_ADD_CITY", memberCardRow.getEmployerCity());
        } else {
            downloadApplicationMap.put("EMP_ADD_CITY", "");
        }
        if (memberCardRow.getBusinessPhoneNumber() != null) {
            downloadApplicationMap.put("BUSINESS_PHONE", memberCardRow.getBusinessPhoneNumber());
        } else {
            downloadApplicationMap.put("BUSINESS_PHONE", "");
        }
        if (memberCardRow.getBusinessPhoneExtn() != null) {
            downloadApplicationMap.put("BUSINESS_PHONE_EXTN", memberCardRow.getBusinessPhoneExtn());
        } else {
            downloadApplicationMap.put("BUSINESS_PHONE_EXTN", "");
        }
        if (memberCardRow.getBirthCountryCode() != null) {
            downloadApplicationMap.put("COUNTRY_OF_BIRTH", findCountryNames("COUNTRY", memberCardRow.getBirthCountryCode().toString()));
        } else {
            downloadApplicationMap.put("COUNTRY_OF_BIRTH", "");
        }
        if (memberCardRow.getLocalTaxExempt() != null) {
            downloadApplicationMap.put("LOCAL_TAX_EXMP", yesOrNoCodes.get(memberCardRow.getLocalTaxExempt().toString()));
        } else {
            downloadApplicationMap.put("LOCAL_TAX_EXMP", "");
        }
        if (memberCardRow.getNationality() != null) {
            downloadApplicationMap.put("NATIONALITY", findCountryNames("COUNTRY", memberCardRow.getNationality().toString()));
        } else {
            downloadApplicationMap.put("NATIONALITY", "");
        }
        if (memberCardRow.getCitizenShipCountry1() != null) {
            downloadApplicationMap.put("CITIZENSHIP1", findCountryNames("COUNTRY", memberCardRow.getCitizenShipCountry1().toString()));
        } else {
            downloadApplicationMap.put("CITIZENSHIP1", "");
        }
        if (memberCardRow.getCitizenShipCountry2() != null) {
            downloadApplicationMap.put("CITIZENSHIP2", findCountryNames("COUNTRY", memberCardRow.getCitizenShipCountry2().toString()));
        } else {
            downloadApplicationMap.put("CITIZENSHIP2", "");
        }
        if (memberCardRow.getCitizenShipCountry3() != null) {
            downloadApplicationMap.put("CITIZENSHIP3", findCountryNames("COUNTRY", memberCardRow.getCitizenShipCountry3().toString()));
        } else {
            downloadApplicationMap.put("CITIZENSHIP3", "");
        }
        if (memberCardRow.getCitizenShipCountry4() != null) {
            downloadApplicationMap.put("CITIZENSHIP4", findCountryNames("COUNTRY", memberCardRow.getCitizenShipCountry4().toString()));
        } else {
            downloadApplicationMap.put("CITIZENSHIP4", "");
        }
        if (memberCardRow.getEligibleForeignTax() != null) {
            downloadApplicationMap.put("ELIGIBLE_FOR_TAX", yesOrNoCodes.get(memberCardRow.getEligibleForeignTax().toString()));
        } else {
            downloadApplicationMap.put("ELIGIBLE_FOR_TAX", "");
        }
        if (memberCardRow.getDocForeignTaxExempt() != null) {
            downloadApplicationMap.put("DOCS_FOR_TAX_EXMP", yesOrNoCodes.get(memberCardRow.getDocForeignTaxExempt().toString()));
        } else {
            downloadApplicationMap.put("DOCS_FOR_TAX_EXMP", "");
        }
        if (memberCardRow.getForeignCitizenship() != null) {
            downloadApplicationMap.put("CITIZENS_IN_OTHER_COUNTRY", yesOrNoCodes.get(memberCardRow.getForeignCitizenship().toString()));
        } else {
            downloadApplicationMap.put("CITIZENS_IN_OTHER_COUNTRY", "");
        }
        if (memberCardRow.getPowerOfAttorney() != null) {
            downloadApplicationMap.put("POWER_OF_ATTERNY", yesOrNoCodes.get(memberCardRow.getPowerOfAttorney().toString()));
        } else {
            downloadApplicationMap.put("POWER_OF_ATTERNY", "");
        }
        
        return downloadApplicationMap;
    }
    
    public String findLookupDesc(String lookupType, String lookupCode){
            ViewObjectImpl lookupVO = this.getLookUpDataVO();
            RowQualifier rowQualifier = new RowQualifier(lookupVO);
            //set where clause to row qualifier 
            rowQualifier.setWhereClause("LookupType='"+lookupType+"' AND LookupCode='"+lookupCode+"'");
            //get filtered rows using row qualifier 
            Row[] filteredRows = lookupVO.getFilteredRows(rowQualifier);  
            if((filteredRows != null) && (filteredRows.length >0)){
              LookUpDataVVORowImpl row = (LookUpDataVVORowImpl)filteredRows[0];
              return row.getLookupDesc();
            }else{
                return null;
            }
    }
    
    public String findCountryNames(String lookupType, String lookupCode){
            ViewObjectImpl lookupVO = this.getCountryVO();
            RowQualifier rowQualifier = new RowQualifier(lookupVO);
            //set where clause to row qualifier 
            rowQualifier.setWhereClause("CodeType='"+lookupType+"' AND CountryId='"+lookupCode+"'");
            //get filtered rows using row qualifier 
            Row[] filteredRows = lookupVO.getFilteredRows(rowQualifier);  
            if((filteredRows != null) && (filteredRows.length >0)){
              CountryVVORowImpl row = (CountryVVORowImpl)filteredRows[0];
              return row.getCountryName();
            }else{
                return null;
            }
    }
    
    public String findOccupationDesc(String occupationCode){
            ViewObjectImpl lookupVO = this.getOccupationCodesVO();
            Row[] filteredRows = lookupVO.getFilteredRows("OccupationId",occupationCode);  
            if((filteredRows != null) && (filteredRows.length >0)){
              OccupationCodesVVORowImpl row = (OccupationCodesVVORowImpl)filteredRows[0];
              return row.getOccupationDes();
            }else{
                return null;
            }
    }
    /**
     * Container's getter for CardApplicationVVO1.
     * @return CardApplicationVVO1
     */
    public CardApplicationVVOImpl getCardTodayTopup() {
        return (CardApplicationVVOImpl) findViewObject("CardTodayTopup");
    }

    /**
     * Container's getter for CardApplicationVVO1.
     * @return CardApplicationVVO1
     */
    public CardApplicationVVOImpl getCardApplicationCIFNumber() {
        return (CardApplicationVVOImpl) findViewObject("CardApplicationCIFNumber");
    }

    /**
     * Container's getter for LookUpDataVVO1.
     * @return LookUpDataVVO1
     */
    public ViewObjectImpl getLookUpDataVO() {
        return (ViewObjectImpl) findViewObject("LookUpDataVO");
    }

    /**
     * Container's getter for CountryVVO1.
     * @return CountryVVO1
     */
    public ViewObjectImpl getCountryVO() {
        return (ViewObjectImpl) findViewObject("CountryVO");
    }

    /**
     * Container's getter for OccupationCodesVVO1.
     * @return OccupationCodesVVO1
     */
    public ViewObjectImpl getOccupationCodesVO() {
        return (ViewObjectImpl) findViewObject("OccupationCodesVO");
    }
    
    public void generateAndSetMPSDID(){
        LincuMemberCardVOImpl memberCard = this.getLincuMemberCard();
         LincuMemberCardVORowImpl memberRow = (LincuMemberCardVORowImpl) memberCard.getCurrentRow();
         if(memberRow != null){
             String  creditUnionId = memberRow.getCreditUnionId();
             String  creditUnionBranchId = memberRow.getCreditUnionBranchId();
             if(creditUnionId != null){
                 creditUnionId = this.findCreditUnionCodeById(creditUnionId);
             }
             if(creditUnionBranchId != null){
                 creditUnionBranchId = this.findCreditUnionBranchCodeById(creditUnionBranchId);
             }
             SimpleDateFormat format = new SimpleDateFormat("YYDDD");
             String date = format.format(new Date());
             String cardId = getFiveDigitApplicationNumber(date, memberRow.getCardId());
             if((creditUnionId != null) && (creditUnionBranchId != null) && (cardId != null)){
              memberRow.setMpsdId(creditUnionId.concat(creditUnionBranchId).concat(cardId));
             }
         }
    }
    
    private String getFiveDigitApplicationNumber(String date, BigDecimal cardId){
        if(cardId != null){
           String cardNumber = cardId.toString(); 
           if(cardNumber.length() == 1){
               return cardNumber = date.concat("0000").concat(cardNumber);
           }else if(cardNumber.length() == 2){
               return cardNumber = date.concat("000").concat(cardNumber);
           }else if(cardNumber.length() == 3){
               return cardNumber = date.concat("00").concat(cardNumber);
           }else if(cardNumber.length() == 4){
               return cardNumber = date.concat("0").concat(cardNumber);
           }else{
               return date.concat(cardNumber);
           }
        }else{
        return null;
        }
    }
}

