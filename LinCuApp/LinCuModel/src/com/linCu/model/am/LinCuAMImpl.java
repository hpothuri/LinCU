package com.linCu.model.am;

import com.linCu.model.am.common.LinCuAM;
import com.linCu.model.view.CreditUnionBranchVOImpl;
import com.linCu.model.view.CreditUnionVOImpl;
import com.linCu.model.view.LincuMemberCardDocsVOImpl;
import com.linCu.model.view.LincuMemberCardDocsVORowImpl;
import com.linCu.model.view.LincuMemberCardVOImpl;
import com.linCu.model.view.LincuMemberCardVORowImpl;
import com.linCu.model.view.LincuMemberVOImpl;
import com.linCu.model.view.LincuUserInfoVOImpl;
import oracle.jbo.server.SequenceImpl;
import com.linCu.model.view.LincuUserInfoVORowImpl;
import com.linCu.model.vvo.LoginVVOImpl;
import java.util.Map;
import com.linCu.model.vvo.LoginVVORowImpl;
import java.math.BigDecimal;
import java.util.HashMap;

import java.util.HashSet;
import java.util.Set;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Mar 11 00:25:16 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LinCuAMImpl extends ApplicationModuleImpl implements LinCuAM {
    /**
     * This is the default constructor (do not remove).
     */
    public LinCuAMImpl() {
    }

    /**
     * Container's getter for CreditUnion.
     * @return CreditUnion
     */
    public CreditUnionVOImpl getCreditUnion() {
        return (CreditUnionVOImpl) findViewObject("CreditUnion");
    }

    /**
     * Container's getter for LincuUserInfo.
     * @return LincuUserInfo
     */
    public LincuUserInfoVOImpl getLincuUserInfo() {
        return (LincuUserInfoVOImpl) findViewObject("LincuUserInfo");
    }

    /**
     * Container's getter for CreditUnionBranch.
     * @return CreditUnionBranch
     */
    public CreditUnionBranchVOImpl getCreditUnionBranch() {
        return (CreditUnionBranchVOImpl) findViewObject("CreditUnionBranch");
    }

    /**
     * Container's getter for LoginView.
     * @return LoginView
     */
    public LoginVVOImpl getLoginView() {
        return (LoginVVOImpl) findViewObject("LoginView");
    }

    /**
     * Container's getter for CreditUnionBranchVL.
     * @return CreditUnionBranchVL
     */
    public ViewLinkImpl getCreditUnionBranchVL() {
        return (ViewLinkImpl) findViewLink("CreditUnionBranchVL");
    }
    
    public String validateLogin(String userName, String password){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            String psd = row.getPassword();
            if((password != null) && (password.equals(psd))){
                if("Y".equalsIgnoreCase(row.getFirstLoginFlag())){
                 return "FirstLoginSuccess";
                }else{
                return "Success";
                }
            }else{
                return "InvalidLogin";
            }
        }else{
            return "InvalidUserName";
        }
    }
    
    public Map userSessionInfo(String userName){
        Map userMap = new HashMap<String, String>();
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            userMap.put("userName", row.getUserName());
            userMap.put("role", row.getRole());
            userMap.put("roleDesc", row.getRoleDescription()); 
            userMap.put("userType", row.getRoleDescription());
            userMap.put("creditUnionId", row.getCreditUnionId());
        }
        return userMap;
    }
    /**
     * Container's getter for LincuUserInfoVO2.
     * @return LincuUserInfoVO2
     */
    public LincuUserInfoVOImpl getPasswordReset() {
        return (LincuUserInfoVOImpl) findViewObject("PasswordReset");
    }


    public Long userCurrentRow(String userName){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            Long userId = row.getUserId();
            if(userId != null){
                return userId;
            }
        }else{
            return null;
        }
        return null;
    }
    
    public void setUserCurrentRow(Long userId){
        LincuUserInfoVOImpl loginView = this.getPasswordReset();
        Row[] rows = loginView.findByKey(new Key(new Object[]{userId}), 1);
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)rows[0];
        this.getPasswordReset().setCurrentRow(row);
        
    }
    
    public String firstTimeResetPassword(String newPassword, String confirmPassword, Long userId){
        if((newPassword != null) && (confirmPassword != null) && newPassword.equalsIgnoreCase(confirmPassword)){  
            LincuUserInfoVOImpl loginView = this.getPasswordReset();
            LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
            loginView.setCurrentRow(row);  
           if(row != null){
               String qustn1 = row.getSecurityQustn();
               String qustn2 = row.getSecurityQustn1();
               String qustn3 = row.getSecurityQustn2();
               String qustn4 = row.getSecurityQustn3();
               String qustn5 = row.getSecurityQustn4();
               
               Set<String> setToFindDuplicate = new HashSet<String>();
               if(qustn1 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn1); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn2 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn2); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn3 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn3); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn4 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn4); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
               if(qustn5 != null){
                 boolean notDuplicate = setToFindDuplicate.add(qustn5); 
                 if(!notDuplicate)
                 return "duplicateNotAllowed";
               }
                  row.setPassword(newPassword);
                  row.setFirstLoginFlag("N");
                  this.getDBTransaction().commit();
                  return "success";             
           }
            
        }else{
            return "MismatchInConfirmPassword";
        }
        
        return "failure";
    }
    
    public String validateSecQustns(String answer1, String answer2, String answer3, String answer4, String answer5){
        LincuUserInfoVOImpl loginView = this.getPasswordReset();
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
        loginView.setCurrentRow(row); 
        if(row != null){
            if((answer1 != null) && (!answer1.equalsIgnoreCase(row.getSecurityQustnAns()))){
              return "failure";  
            }
            if((answer2 != null) && (!answer2.equalsIgnoreCase(row.getSecurityQustnAns1()))){
              return "failure";  
            }
            if((answer3 != null) && (!answer3.equalsIgnoreCase(row.getSecurityQustnAns2()))){
              return "failure";  
            }
            if((answer4 != null) && (!answer4.equalsIgnoreCase(row.getSecurityQustnAns3()))){
              return "failure";  
            }
            if((answer5 != null) && (!answer5.equalsIgnoreCase(row.getSecurityQustnAns4()))){
              return "failure";  
            }
        }
       return "success"; 
    }
    
    public String resetPassword(String oldPassword, String newPassword, String confirmPassword){
        if((newPassword != null) && (confirmPassword != null) && newPassword.equalsIgnoreCase(confirmPassword)){
            LincuUserInfoVOImpl loginView = this.getPasswordReset();
            LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
            loginView.setCurrentRow(row); 
           if(row != null){
              String password =  row.getPassword();
              if((oldPassword != null) && (password != null) && oldPassword.equalsIgnoreCase(password)){
                  row.setPassword(newPassword);
                  row.setFirstLoginFlag("N");
                  this.getDBTransaction().commit();
                  return "success";
              }else{
                  return "InvalidOldPassword";
              }
           }
            
        }else{
            return "MismatchInConfirmPassword";
        }
        
        //this.getCurrentRow();
        
        return "failure";
    }
    
    public void forgotResetPassword(String password){
        LincuUserInfoVOImpl loginView = this.getPasswordReset();
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)loginView.getCurrentRow();
        loginView.setCurrentRow(row); 
        if(row != null){
        row.setPassword(password);
        row.setFirstLoginFlag("Y");
        }
    }
    
    public void setLoggedInUserCurrentRow(String userName){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            Long userId = row.getUserId();
            if(userId != null){
                Row[] rows = loginView.findByKey(new Key(new Object[]{userId}), 1);
                LincuUserInfoVORowImpl row1 = (LincuUserInfoVORowImpl)rows[0];
                loginView.setCurrentRow(row1);
            }
        }
    }

    /**
     * Container's getter for LincuMemberVO1.
     * @return LincuMemberVO1
     */
    public LincuMemberVOImpl getLincuMember() {
        return (LincuMemberVOImpl) findViewObject("LincuMember");
    }

    /**
     * Container's getter for LincuMemberCardVO1.
     * @return LincuMemberCardVO1
     */
    public LincuMemberCardVOImpl getLincuMemberCard() {
        return (LincuMemberCardVOImpl) findViewObject("LincuMemberCard");
    }

    /**
     * Container's getter for LincuMemberCardDocsVO1.
     * @return LincuMemberCardDocsVO1
     */
    public LincuMemberCardDocsVOImpl getLincuMemberCardDocs() {
        return (LincuMemberCardDocsVOImpl) findViewObject("LincuMemberCardDocs");
    }

    /**
     * Container's getter for MemberCardToMemberDocsVL1.
     * @return MemberCardToMemberDocsVL1
     */
    public ViewLinkImpl getMemberCardToMemberDocsVL1() {
        return (ViewLinkImpl) findViewLink("MemberCardToMemberDocsVL1");
    }
    
    public String userExists(String userName){
        LoginVVOImpl loginView = this.getLoginView();
        loginView.setbindUserName(userName); 
        loginView.executeQuery();
        LoginVVORowImpl row = (LoginVVORowImpl)loginView.first();
        if(row != null){
            return "success";
        }else{
            return "InvalidUserName";
        }
    }
    
    public void requestCard(String requestor, String creditUnionId){
        LincuMemberCardVOImpl cardVO = this.getLincuMemberCard();
        LincuMemberCardVORowImpl row = (LincuMemberCardVORowImpl) cardVO.createRow();
        if(row != null){
        cardVO.insertRow(row);
        cardVO.setCurrentRow(row);
        row.setCreditUnionId(creditUnionId);
        row.setCreatedBy(requestor);
        long time = System.currentTimeMillis();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(time);
        row.setCreatedOn(timestamp);
        LincuMemberCardDocsVOImpl docVO = this.getLincuMemberCardDocs();
        LincuMemberCardDocsVORowImpl docRow1 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
        if(docRow1 != null){
            docVO.insertRow(docRow1);
            docRow1.setRequired("Y"); 
            docRow1.setDocumentType("ID_PROOF");
        }
            LincuMemberCardDocsVORowImpl docRow2 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
            if(docRow2 != null){
                docVO.insertRow(docRow2);
                docRow2.setRequired("Y"); 
                docRow2.setDocumentType("ADDRESS_PROOF");
            }
        }
    }
    
    public boolean isAllRequiredDocumentsUploaded(){
        LincuMemberCardDocsVOImpl vo = this.getLincuMemberCardDocs();
           Row rows[] = vo.getAllRowsInRange();
           for(Row row : rows){
              LincuMemberCardDocsVORowImpl docRow = (LincuMemberCardDocsVORowImpl)row;
               if(docRow != null){
                   if("Y".contentEquals(docRow.getRequired()) && docRow.getDocument() == null){
                       return false;
                   }
               }
             }
        return true;
    }
    
    public void addRequiredDcosRecords(){
        LincuMemberCardVOImpl cardVO = this.getLincuMemberCard();
        LincuMemberCardVORowImpl row = (LincuMemberCardVORowImpl) cardVO.getCurrentRow();
        System.out.println("---Current Card Id---"+row.getCardId());
        if(row != null){
        cardVO.setCurrentRow(row);
        LincuMemberCardDocsVOImpl docVO = this.getLincuMemberCardDocs();
        LincuMemberCardDocsVORowImpl docRow1 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
        if(docRow1 != null){
            docVO.insertRow(docRow1);
            docRow1.setRequired("Y"); 
            docRow1.setDocumentType("ID_PROOF");
        }
            LincuMemberCardDocsVORowImpl docRow2 = (LincuMemberCardDocsVORowImpl) docVO.createRow();
            if(docRow2 != null){
                docVO.insertRow(docRow2);
                docRow2.setRequired("Y"); 
                docRow2.setDocumentType("ADDRESS_PROOF");
            }
        }
    }

    public void addToBatch() {
        Row[] selectedRows = getLincuMemberCard().getFilteredRows("RowSelection", Boolean.TRUE);
        SequenceImpl nextBatchNum = new SequenceImpl("BATCH_NUMBER_SEQ", getDBTransaction());
        for (Row row : selectedRows) {
            ((LincuMemberCardVORowImpl) row).setBatchNumber(nextBatchNum.getSequenceNumber().getBigDecimalValue());
            ((LincuMemberCardVORowImpl) row).setRowSelection(Boolean.FALSE);
        }
        getLincuMemberCard().clearCache();
        getLincuMemberCard().executeQuery();
    }
}

