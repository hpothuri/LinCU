package com.linCu.model.view;

import com.linCu.model.view.common.LincuUserInfoVO;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Mar 05 17:38:34 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LincuUserInfoVOImpl extends ViewObjectImpl implements LincuUserInfoVO {
    /**
     * This is the default constructor (do not remove).
     */
    public LincuUserInfoVOImpl() {
    }
    
    public String loginUser(){
        return null;
    }
    
    public String resetPassword(String oldPassword, String newPassword, String confirmPassword, Long userId ){
        if((newPassword != null) && (confirmPassword != null) && newPassword.equalsIgnoreCase(confirmPassword)){
            LincuUserInfoVOImpl loginView = this;
            Row[] rows = loginView.findByKey(new Key(new Object[]{userId}), 1);
            LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)rows[0];
            loginView.setCurrentRow(row); 
           if(row != null){
              String password =  row.getPassword();
              if((oldPassword != null) && (password != null) && oldPassword.equalsIgnoreCase(password)){
                  row.setPassword(newPassword);
                  row.setFirstLoginFlag("N");
                  this.getDBTransaction().commit();
                  return "success";
              }else{
                  return "InvalidOldPassword";
              }
           }
            
        }else{
            return "MismatchInConfirmPassword";
        }
        
        //this.getCurrentRow();
        
        return "failure";
    }
    
    public void createUser(String user){
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl) this.createRow();
        long time = System.currentTimeMillis();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(time);
        if(row != null){
        this.insertRow(row);
        this.setCurrentRow(row);
        row.setCreatedBy(user);
        row.setCreationDate(timestamp);
        row.setLastUpdatedBy(user);
        row.setLastUpdateDate(timestamp);
        }
    }
    
    public void updateUser(String user){
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl) this.getCurrentRow();
        long time = System.currentTimeMillis();
        java.sql.Timestamp timestamp = new java.sql.Timestamp(time);
        if(row != null){
        this.executeQuery();
        row.setLastUpdatedBy(user);
        row.setLastUpdateDate(timestamp);
        }
    }
    
    public void forgotResetPassword(String password, Long userId){
        LincuUserInfoVOImpl loginView = this;
        Row[] rows = loginView.findByKey(new Key(new Object[]{userId}), 1);
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)rows[0];
        loginView.setCurrentRow(row); 
        if(row != null){
        row.setPassword(password);
        row.setFirstLoginFlag("Y");
        }
    }
    
    public void forgotPassword(){
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl) this.getCurrentRow();
        if(row != null){
        row.setFirstLoginFlag("Y");
        }
    }
    
    public String firstTimeResetPassword(String newPassword, String confirmPassword, Long userId){
        if((newPassword != null) && (confirmPassword != null) && newPassword.equalsIgnoreCase(confirmPassword)){  
            LincuUserInfoVOImpl loginView = this;
            Row[] rows = loginView.findByKey(new Key(new Object[]{userId}), 1);
            LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl)rows[0];
            loginView.setCurrentRow(row);  
           if(row != null){
                  row.setPassword(newPassword);
                  row.setFirstLoginFlag("N");
                  this.getDBTransaction().commit();
                  return "success";             
           }
            
        }else{
            return "MismatchInConfirmPassword";
        }
        
        return "failure";
    }
    
    public void updatePassword(String password){
        LincuUserInfoVORowImpl row = (LincuUserInfoVORowImpl) this.getCurrentRow();
        if(row != null){
        row.setPassword(password);
        }
    }

    /**
     * Returns the variable value for bindCreditUnionId.
     * @return variable value for bindCreditUnionId
     */
    public String getbindCreditUnionId() {
        return (String) ensureVariableManager().getVariableValue("bindCreditUnionId");
    }

    /**
     * Sets <code>value</code> for variable bindCreditUnionId.
     * @param value value to bind as bindCreditUnionId
     */
    public void setbindCreditUnionId(String value) {
        ensureVariableManager().setVariableValue("bindCreditUnionId", value);
    }
}

